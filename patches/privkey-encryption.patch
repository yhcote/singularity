Credits: This patch contains modifications from patches written by:
	Fan Jiang <fanjiang@thoughtworks.com> and
	Sofia Celi <sceli@thoughtworks.com>
--- openpgp/packet/private_key.go.orig	2018-09-16 22:23:05.589001000 -0700
+++ openpgp/packet/private_key.go	2018-09-17 00:16:11.861001000 -0700
@@ -10,6 +10,7 @@
 	"crypto/cipher"
 	"crypto/dsa"
 	"crypto/ecdsa"
+	"crypto/rand"
 	"crypto/rsa"
 	"crypto/sha1"
 	"io"
@@ -34,8 +35,22 @@
 	PrivateKey    interface{} // An *{rsa|dsa|ecdsa}.PrivateKey or a crypto.Signer.
 	sha1Checksum  bool
 	iv            []byte
+
+	// s2k related
+	salt      []byte
+	s2kMode   uint8
+	s2kConfig s2k.Config
+	s2kType   S2KType
 }
 
+type S2KType uint8
+
+const (
+	S2KNON      S2KType = 0
+	S2KSHA1     S2KType = 254
+	S2KCHECKSUM S2KType = 255
+)
+
 func NewRSAPrivateKey(currentTime time.Time, priv *rsa.PrivateKey) *PrivateKey {
 	pk := new(PrivateKey)
 	pk.PublicKey = *NewRSAPublicKey(currentTime, &priv.PublicKey)
@@ -92,24 +107,24 @@
 		return
 	}
 
-	s2kType := buf[0]
+	pk.s2kType = S2KType(buf[0])
 
-	switch s2kType {
-	case 0:
+	switch pk.s2kType {
+	case S2KNON:
 		pk.s2k = nil
 		pk.Encrypted = false
-	case 254, 255:
+	case S2KSHA1, S2KCHECKSUM:
 		_, err = readFull(r, buf[:])
 		if err != nil {
 			return
 		}
 		pk.cipher = CipherFunction(buf[0])
 		pk.Encrypted = true
-		pk.s2k, err = s2k.Parse(r)
+		pk.s2k, pk.s2kMode, pk.s2kConfig.Hash, pk.salt, pk.s2kConfig.S2KCount, err = s2k.Parse2(r)
 		if err != nil {
 			return
 		}
-		if s2kType == 254 {
+		if pk.s2kType == S2KSHA1 {
 			pk.sha1Checksum = true
 		}
 	default:
@@ -148,40 +163,119 @@
 	return h
 }
 
-func (pk *PrivateKey) Serialize(w io.Writer) (err error) {
-	// TODO(agl): support encrypted private keys
-	buf := bytes.NewBuffer(nil)
-	err = pk.PublicKey.serializeWithoutHeaders(buf)
-	if err != nil {
-		return
+func (pk *PrivateKey) SerializeEncrypted(w io.Writer) error {
+	privateKeyBuf := bytes.NewBuffer(nil)
+	encodedKeyBuf := bytes.NewBuffer(nil)
+	if _, err := encodedKeyBuf.Write([]byte{uint8(pk.s2kType)}); err != nil {
+		return err
+	}
+	if _, err := encodedKeyBuf.Write([]byte{uint8(pk.cipher)}); err != nil {
+		return err
+	}
+	if _, err := encodedKeyBuf.Write([]byte{pk.s2kMode}); err != nil {
+		return err
+	}
+	hashID, ok := s2k.HashToHashId(pk.s2kConfig.Hash)
+	if !ok {
+		return errors.UnsupportedError("no such hash")
+	}
+	if _, err := encodedKeyBuf.Write([]byte{hashID}); err != nil {
+		return err
+	}
+	if _, err := encodedKeyBuf.Write(pk.salt); err != nil {
+		return err
+	}
+	if _, err := encodedKeyBuf.Write([]byte{pk.s2kConfig.EncodedCount()}); err != nil {
+		return err
 	}
-	buf.WriteByte(0 /* no encryption */)
 
-	privateKeyBuf := bytes.NewBuffer(nil)
+	if _, err := privateKeyBuf.Write(pk.encryptedData); err != nil {
+		return err
+	}
+
+	encodedKey := encodedKeyBuf.Bytes()
+	privateKeyBytes := privateKeyBuf.Bytes()
+
+	if _, err := w.Write(encodedKey); err != nil {
+		return err
+	}
+	if _, err := w.Write(pk.iv); err != nil {
+		return err
+	}
+	if _, err := w.Write(privateKeyBytes); err != nil {
+		return err
+	}
+
+	return nil
+}
 
+func (pk *PrivateKey) SerializeUnEncrypted(w io.Writer) (err error) {
+	buf := bytes.NewBuffer(nil)
+	if _, err := buf.Write([]byte{uint8(S2KNON)} /* no encryption */); err != nil {
+		return err
+	}
 	switch priv := pk.PrivateKey.(type) {
 	case *rsa.PrivateKey:
-		err = serializeRSAPrivateKey(privateKeyBuf, priv)
+		err = serializeRSAPrivateKey(buf, priv)
 	case *dsa.PrivateKey:
-		err = serializeDSAPrivateKey(privateKeyBuf, priv)
+		err = serializeDSAPrivateKey(buf, priv)
 	case *elgamal.PrivateKey:
-		err = serializeElGamalPrivateKey(privateKeyBuf, priv)
+		err = serializeElGamalPrivateKey(buf, priv)
 	case *ecdsa.PrivateKey:
-		err = serializeECDSAPrivateKey(privateKeyBuf, priv)
+		err = serializeECDSAPrivateKey(buf, priv)
 	default:
 		err = errors.InvalidArgumentError("unknown private key type")
 	}
 	if err != nil {
+		return err
+	}
+	privateKeyBytes := buf.Bytes()
+	if pk.sha1Checksum {
+		h := sha1.New()
+		if _, err := h.Write(privateKeyBytes); err != nil {
+			return err
+		}
+		sum := h.Sum(nil)
+		privateKeyBytes = append(privateKeyBytes, sum...)
+	} else {
+		checksum := mod64kHash(privateKeyBytes)
+		var checksumBytes [2]byte
+		checksumBytes[0] = byte(checksum >> 8)
+		checksumBytes[1] = byte(checksum)
+		privateKeyBytes = append(privateKeyBytes, checksumBytes[:]...)
+	}
+	if _, err := w.Write(privateKeyBytes); err != nil {
+		return err
+	}
+	return
+}
+
+func (pk *PrivateKey) Serialize(w io.Writer) (err error) {
+	// TODO(agl): support encrypted private keys
+	buf := bytes.NewBuffer(nil)
+	err = pk.PublicKey.serializeWithoutHeaders(buf)
+	if err != nil {
 		return
 	}
 
+	privateKeyBuf := bytes.NewBuffer(nil)
+	if pk.Encrypted {
+		if err = pk.SerializeEncrypted(privateKeyBuf); err != nil {
+			return err
+		}
+	} else {
+		if err = pk.SerializeUnEncrypted(privateKeyBuf); err != nil {
+			return err
+		}
+	}
+
 	ptype := packetTypePrivateKey
 	contents := buf.Bytes()
 	privateKeyBytes := privateKeyBuf.Bytes()
 	if pk.IsSubkey {
 		ptype = packetTypePrivateSubkey
 	}
-	err = serializeHeader(w, ptype, len(contents)+len(privateKeyBytes)+2)
+	err = serializeHeader(w, ptype, len(contents)+len(privateKeyBytes))
 	if err != nil {
 		return
 	}
@@ -193,13 +287,6 @@
 	if err != nil {
 		return
 	}
-
-	checksum := mod64kHash(privateKeyBytes)
-	var checksumBytes [2]byte
-	checksumBytes[0] = byte(checksum >> 8)
-	checksumBytes[1] = byte(checksum)
-	_, err = w.Write(checksumBytes[:])
-
 	return
 }
 
@@ -231,6 +318,107 @@
 	return writeBig(w, priv.D)
 }
 
+func (pk *PrivateKey) Encrypt(passphrase []byte) error {
+	privateKeyBuf := bytes.NewBuffer(nil)
+	err := pk.SerializePGPPrivate(privateKeyBuf)
+	if err != nil {
+		return err
+	}
+
+	//Default config of private key encryption
+	pk.cipher = CipherAES128
+	pk.s2kMode = 3 //Iterated
+	pk.s2kConfig = s2k.Config{
+		S2KCount: 65536,
+		Hash:     crypto.SHA1,
+	}
+
+	privateKeyBytes := privateKeyBuf.Bytes()
+	key := make([]byte, pk.cipher.KeySize())
+	pk.salt = make([]byte, 8)
+	rand.Read(pk.salt)
+
+	pk.s2k = func(out, in []byte) {
+		s2k.Iterated(out, pk.s2kConfig.Hash.New(), in, pk.salt, pk.s2kConfig.S2KCount)
+	}
+	pk.s2k(key, passphrase)
+	block := pk.cipher.new(key)
+	pk.iv = make([]byte, pk.cipher.blockSize())
+	rand.Read(pk.iv)
+	cfb := cipher.NewCFBEncrypter(block, pk.iv)
+
+	if pk.sha1Checksum {
+		pk.s2kType = S2KSHA1
+		h := sha1.New()
+		if _, err := h.Write(privateKeyBytes); err != nil {
+			return err
+		}
+		sum := h.Sum(nil)
+		privateKeyBytes = append(privateKeyBytes, sum...)
+	} else {
+		pk.s2kType = S2KCHECKSUM
+		var sum uint16
+		for i := 0; i < len(privateKeyBytes); i++ {
+			sum += uint16(privateKeyBytes[i])
+		}
+		privateKeyBytes = append(privateKeyBytes, uint8(sum>>8))
+		privateKeyBytes = append(privateKeyBytes, uint8(sum))
+	}
+
+	pk.encryptedData = make([]byte, len(privateKeyBytes))
+
+	cfb.XORKeyStream(pk.encryptedData, privateKeyBytes)
+
+	pk.Encrypted = true
+	return err
+}
+
+func (pk *PrivateKey) SerializePGPPrivate(privateKeyBuf io.Writer) error {
+	var err error
+	switch priv := pk.PrivateKey.(type) {
+	case *rsa.PrivateKey:
+		err = serializePGPRSAPrivateKey(privateKeyBuf, priv)
+	case *dsa.PrivateKey:
+		err = serializePGPDSAPrivateKey(privateKeyBuf, priv)
+	case *elgamal.PrivateKey:
+		err = serializePGPElGamalPrivateKey(privateKeyBuf, priv)
+	case *ecdsa.PrivateKey:
+		err = serializePGPECDSAPrivateKey(privateKeyBuf, priv)
+	default:
+		err = errors.InvalidArgumentError("unknown private key type")
+	}
+	return err
+}
+
+func serializePGPRSAPrivateKey(w io.Writer, priv *rsa.PrivateKey) error {
+	err := writeBig(w, priv.D)
+	if err != nil {
+		return err
+	}
+	err = writeBig(w, priv.Primes[0])
+	if err != nil {
+		return err
+	}
+	err = writeBig(w, priv.Primes[1])
+	if err != nil {
+		return err
+	}
+	u := new(big.Int).ModInverse(priv.Primes[0], priv.Primes[1])
+	return writeBig(w, u)
+}
+
+func serializePGPDSAPrivateKey(w io.Writer, priv *dsa.PrivateKey) error {
+	return writeBig(w, priv.X)
+}
+
+func serializePGPElGamalPrivateKey(w io.Writer, priv *elgamal.PrivateKey) error {
+	return writeBig(w, priv.X)
+}
+
+func serializePGPECDSAPrivateKey(w io.Writer, priv *ecdsa.PrivateKey) error {
+	return writeBig(w, priv.D)
+}
+
 // Decrypt decrypts an encrypted private key using a passphrase.
 func (pk *PrivateKey) Decrypt(passphrase []byte) error {
 	if !pk.Encrypted {
@@ -241,7 +429,6 @@
 	pk.s2k(key, passphrase)
 	block := pk.cipher.new(key)
 	cfb := cipher.NewCFBDecrypter(block, pk.iv)
-
 	data := make([]byte, len(pk.encryptedData))
 	cfb.XORKeyStream(data, pk.encryptedData)
 
@@ -315,6 +502,7 @@
 		return err
 	}
 	rsaPriv.Precompute()
+
 	pk.PrivateKey = rsaPriv
 	pk.Encrypted = false
 	pk.encryptedData = nil
--- openpgp/s2k/s2k.go.orig	2018-09-16 10:20:33.981652000 -0700
+++ openpgp/s2k/s2k.go	2018-09-16 10:20:34.661992000 -0700
@@ -45,6 +45,10 @@
 	return c.Hash
 }
 
+func (c *Config) EncodedCount() uint8 {
+	return c.encodedCount()
+}
+
 func (c *Config) encodedCount() uint8 {
 	if c == nil || c.S2KCount == 0 {
 		return 96 // The common case. Correspoding to 65536
@@ -151,9 +155,14 @@
 	}
 }
 
+func Parse(r io.Reader) (f func(out, in []byte), err error) {
+	f, _, _, _, _, err = Parse2(r)
+	return
+}
+
 // Parse reads a binary specification for a string-to-key transformation from r
 // and returns a function which performs that transform.
-func Parse(r io.Reader) (f func(out, in []byte), err error) {
+func Parse2(r io.Reader) (f func(out, in []byte), mode uint8, hash crypto.Hash, salt []byte, count int, err error) {
 	var buf [9]byte
 
 	_, err = io.ReadFull(r, buf[:2])
@@ -163,41 +172,46 @@
 
 	hash, ok := HashIdToHash(buf[1])
 	if !ok {
-		return nil, errors.UnsupportedError("hash for S2K function: " + strconv.Itoa(int(buf[1])))
+		err = errors.UnsupportedError("hash for S2K function: " + strconv.Itoa(int(buf[1])))
+		return
 	}
 	if !hash.Available() {
-		return nil, errors.UnsupportedError("hash not available: " + strconv.Itoa(int(hash)))
+		err = errors.UnsupportedError("hash not available: " + strconv.Itoa(int(hash)))
+		return
 	}
 	h := hash.New()
-
-	switch buf[0] {
+	mode = buf[0]
+	switch mode {
 	case 0:
-		f := func(out, in []byte) {
+		f = func(out, in []byte) {
 			Simple(out, h, in)
 		}
-		return f, nil
+		return
 	case 1:
 		_, err = io.ReadFull(r, buf[:8])
 		if err != nil {
 			return
 		}
-		f := func(out, in []byte) {
+		f = func(out, in []byte) {
 			Salted(out, h, in, buf[:8])
 		}
-		return f, nil
+		salt = buf[:8]
+		return
 	case 3:
 		_, err = io.ReadFull(r, buf[:9])
 		if err != nil {
 			return
 		}
-		count := decodeCount(buf[8])
-		f := func(out, in []byte) {
+		count = decodeCount(buf[8])
+		f = func(out, in []byte) {
 			Iterated(out, h, in, buf[:8], count)
 		}
-		return f, nil
+		salt = buf[:8]
+		return
 	}
 
-	return nil, errors.UnsupportedError("S2K function")
+	err = errors.UnsupportedError("S2K function")
+	return
 }
 
 // Serialize salts and stretches the given passphrase and writes the
