#!/bin/sh -
# Copyright (c) 2016-2018, Yannick Cote <yanick@divyan.org>. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be found
# in the LICENSE file.
set -e

# defaults and compiler options
prefix="/usr/local"
# exec_prefix will be set again later
exec_prefix=""
verbose=0
profile=release
hstcc=
hstcc_opts="cc gcc clang i686-w64-mingw32-gcc x86_64-w64-mingw32-gcc"
hstcxx=
hstcxx_opts="c++ g++ clang++ i686-w64-mingw32-g++ x86_64-w64-mingw32-g++"
tgtcc=
tgtcc_opts=$hstcc_opts
tgtcxx=
tgtcxx_opts=$hstcxx_opts
hststatic=0
tgtstatic=0
appsec=0
package_version=`git describe --match 'v[0-9]*' --dirty --always 2>/dev/null || echo "" | sed -e "s/^v//;s/-/_/g;s/_/-/;s/_/./g"`



usage () {
	echo "${0##*/}: could not complete configuration"
}

usage_args () {
	echo "Usage: ${0##*/}: [-dvsS] [-p prefix] [-P profile] [-e exec_prefix] [-b builddir]"
	echo "                 [-c hstcc] [-C tgtcc] [-V version] [-x hstcxx] [-X tgtcxx]"
	echo "       -v build project with verbose flags on"
	echo "       -s build final host project binary statically"
	echo "       -S build final target project binary statically"
	echo "       -p install project in \`prefix'"
	echo "       -P use config profile to configure the project:"
	echo "           release             (DEFAULT) normal release mode (production)"
	echo "           release-stripped    release mode, stripped symbols (rpm packaging)"
	echo "           debug               C portion of CGO built unoptimized, with symbols"
	echo "       -e install project executables in \`exec_prefix'"
	echo "       -b build project in \`builddir'"
	echo "       -c build project with host C \`compiler'"
	echo "       -C build project with target C\`compiler'"
	echo "       -V build project with given version"
	echo "       -x build project with host C++ \`compiler'"
	echo "       -X build project with target C++ \`compiler'"
	echo "       -h this help"
	echo "\`host C compiler': $hstcc_opts"
	echo "\`host C++ compiler': $hstcxx_opts"
	echo "\`target C compiler': $tgtcc_opts"
	echo "\`target C++ compiler': $tgtcxx_opts"
}

# save the command line
cmdline="`pwd -P`/${0##*/} $*"

# check line options
args=`getopt p:P:e:b:c:C:sSvV:x:X:h $*`
if [ $? -ne 0 ]; then
	usage_args
	exit 2
fi
eval set -- "$args"
while [ $# -ne 0 ]; do
 case $1 in
  -p) prefix="$2"; shift; shift;;
  -P) profile="$2"; shift; shift;;
  -e) exec_prefix="$2"; shift; shift;;
  -b) builddir="$2"; shift; shift;;
  -c) hstcc="$2"; shift; shift;;
  -C) tgtcc="$2"; shift; shift;;
  -x) hstcxx="$2"; shift; shift;;
  -X) tgtcxx="$2"; shift; shift;;
  -s) hststatic=1; shift;;
  -S) tgtstatic=1; shift;;
  -v) verbose=1; shift;;
  -V) package_version="$2"; shift; shift;;
  -h) usage_args; exit 2;;
  --) shift; break;;
  ?) usage_args
     exit 2;;
 esac
done
#
# non-option param
if [ $# != 0 ]; then
	usage_args
	exit 2
fi
if [ -z "$exec_prefix" ]; then
    exec_prefix=$prefix
fi
topdir=makeit
sourcedir=`pwd -P`
mfragsdir=$sourcedir/mlocal/frags
mchecksdir=$sourcedir/mlocal/checks

# config profile validation
case $profile in
	release);;
	release-stripped);;
	debug);;
	*) echo "$profile: no such config profile"
	   echo "       -P use config profile to configure the project:"
	   echo "           release             (DEFAULT) normal release mode (production)"
	   echo "           release-stripped    release mode, stripped symbols (rpm packaging)"
	   echo "           debug               C portion of CGO built unoptimized, with symbols"
	   exit 2;;
esac



#######################################################################
# System build tool configuration
#######################################################################
if [ -f $mchecksdir/basechecks.chk ]; then
	echo "=> running base system checks ..."
	. $mchecksdir/basechecks.chk
else
	echo "error: file $mchecksdir/basechecks.chk needs to be present"
	exit 2
fi



#######################################################################
# Extra user specified system configuration checks (mlocal/checks)
#######################################################################
# write a "#define" definition entry into $builddir/config.h
config_add_def ()
{
	if [ "$1" = "" -o "$2" = "" ]; then
		return
	fi
	echo "#define $*" >> $builddir/config.h
}

rm -rf $builddir/config.h
if [ -f $mchecksdir/project.chk ]; then
	echo "=> running project specific checks ..."
	. $mchecksdir/project.chk
fi



#######################################################################
# Generated fragments
#######################################################################
echo "=> generating fragments ..."
if [ ! -d $mfragsdir ]; then
	echo "error: $mfragsdir should be populated with Makefile fragments."
	echo "NOTE: Fragments may be copied from examples found in $topdir/examples/<project>/* "
	echo "NOTE: to $sourcedir/mlocal/* and tweak for your project."
	exit 2
fi


########################
# verbosity
########################
if [ "$verbose" = 1 ]; then
	echo "# build with verbose flag on" >> $genmk
	echo "V :=" >> $genmk
else
	echo "# silent build" >> $genmk
	echo "V := @" >> $genmk
fi
echo >> $genmk


########################
# build tools
########################
cat >> $genmk << EOF
# source/build locations
BUILDDIR := .
BUILDDIR_ABSPATH := `(cd $builddir && pwd -P || false)`
SOURCEDIR := $sourcedir
CONTRIBDIR := $contribdir
PREFIX := $prefix
EXEC_PREFIX := $exec_prefix

HOSTAR := ar
HOSTCC := $hstcc
HOSTCXX := $hstcxx
HOSTLD := $hstcc
HOSTRANLIB := ranlib
HOSTSIZE := size
HOSTOBJCOPY := objcopy

AR := `(cd \`dirname \\\`$tgtcc -print-prog-name=ar\\\`\` && pwd -P || false)`/ar 
CC := $tgtcc
CXX := $tgtcxx
LD := `(cd \`dirname \\\`$tgtcc -print-prog-name=ar\\\`\` && pwd -P || false)`/ld
RANLIB := `(cd \`dirname \\\`$tgtcc -print-prog-name=ar\\\`\` && pwd -P || false)`/ranlib
SIZE := size
OBJCOPY := `(cd \`dirname \\\`$tgtcc -print-prog-name=ar\\\`\` && pwd -P || false)`/objcopy

ARCH := $tgt_arch

EOF


########################
# modules
########################
:>$genconfdir/module.lst

found_modules=`(cat modules | awk '{ printf("%s ", $0) }') \
		2>/dev/null || true`
if [ "$found_modules" = "" ]; then
	found_modules=`find . -name '*.mconf' -print`
	if [ "$found_modules" = "" ]; then
		echo "error: no build modules found !"
		echo
		echo "You need to at least create one \`<module_name>.mconf' "
		echo "file describing either a program, a lib, or a set of"
		echo "objects to build."
		exit 2
	fi
fi
echo " found build modules:"
echo "CPPFLAGS :=" >> $genmk
# NOTE: parsed module (*.mconf) files only substitute var tgt_arch for now
for m in $found_modules; do
	mod=`eval echo ${m##*./}`
	modpath=`eval echo ${mod%/*}`
	if [ `(cd "$modpath" && pwd -P || false)` = $sourcedir ]; then
		modpath="."
	fi
	if [ ! -f $mod ]; then
		echo "error: module file \`$mod' not found!"
		exit 2
	fi

	echo "   +-> $mod"
	echo "$modpath `eval basename $mod`" >> $genconfdir/module.lst
	mkdir -p $genconfdir/$modpath
	cat $mod | awk -v tgt_arch=$tgt_arch '{ gsub(/tgt_arch/, \
				tgt_arch); print }' > $genconfdir/${mod}.parsed
#	echo "CPPFLAGS += -iquote\$(SOURCEDIR)/$modpath" >> $genmk
done
echo >> $genmk

# init LDFLAGS if static builds are supported
if [ "$hststatic" = "1" -a "$tgtstatic" = "1" ]; then
	echo "LDFLAGS := -static" >> $genmk
else
	echo "LDFLAGS :=" >> $genmk
fi
echo >> $genmk

cat >> $genmk << EOF
# make sure \`all' is the first rule
all:
EOF


# call genmod.awk, generating Makefile components
$topdir/genmod.awk modfile=$genconfdir/module.lst \
	topdir=$sourcedir \
	host=$host \
	genconfdir=$genconfdir \
	tmpldir=$topdir/tmpl



#######################################################################
# Target Makefile
#######################################################################
drawline () {
	echo >> $output
	printf "# [ Embedding file : %50s ] #\n" $1 >> $output
	echo >> $output
}

echo "=> building Makefile ..."

:> $output
echo "#" >> $output
echo "# Non-recursive Makefile GENERATED by \`${0##*/}' -- `date`" >> $output
echo "# configured: $cmdline" >> $output
echo "#" >> $output

drawline $genmk
cat $genmk >> $output

drawline $mfragsdir/common_opts.mk
cat $mfragsdir/common_opts.mk >> $output


if [ "$appsec" = "1" ]; then
	drawline $mfragsdir/go_appsec_opts.mk
	cat $mfragsdir/go_appsec_opts.mk >> $output
else
	drawline $mfragsdir/go_common_opts.mk
	cat $mfragsdir/go_common_opts.mk >> $output
fi

case $profile in
	release)
		drawline $mfragsdir/release_opts.mk
		cat $mfragsdir/release_opts.mk >> $output
		drawline $mfragsdir/go_normal_opts.mk
		cat $mfragsdir/go_normal_opts.mk >> $output
		;;
	release-stripped)
		drawline $mfragsdir/release_opts.mk
		cat $mfragsdir/release_opts.mk >> $output
		drawline $mfragsdir/go_stripped_opts.mk
		cat $mfragsdir/go_stripped_opts.mk >> $output
		;;
	debug)
		drawline $mfragsdir/debug_opts.mk
		cat $mfragsdir/debug_opts.mk >> $output
		drawline $mfragsdir/go_normal_opts.mk
		cat $mfragsdir/go_normal_opts.mk >> $output
		;;
esac

if [ -f "$mfragsdir/arch_${tgt_arch}_opts.mk" ]; then
	drawline $mfragsdir/arch_${tgt_arch}_opts.mk
	cat $mfragsdir/arch_${tgt_arch}_opts.mk >> $output
fi

drawline $genconfdir/modules.mk
cat $genconfdir/modules.mk >> $output

drawline $genconfdir/all.mk
cat $genconfdir/all.mk >> $output

drawline $mfragsdir/Makefile.stub
# here, `depends' need to happen after all other rules; at the very end
final_all=`cat $genconfdir/all.mk | awk 'BEGIN { FS="all: " } { print $2 }'`
cat $mfragsdir/Makefile.stub | awk \
	"{ gsub(/^collect:/, \"collect: $final_all\"); print }" >> $output


rm -rf $genconfdir



#######################################################################
# Rpm spec for project package
#######################################################################

RPMSPEC=dist/rpm/singularity.spec
echo "=> generating $RPMSPEC ..."
rm -f $RPMSPEC
VERSION="`echo "$package_version"|sed 's/-.*//'`"
RELEASE="`echo "$package_version"|sed 's/[^-]*-//'`"
if [ "$VERSION" = "$RELEASE" ]; then
    # $package_version has no dash
    RELEASE=1
fi
sed "s/@PACKAGE_VERSION@/$VERSION/;s/@PACKAGE_RELEASE@/$RELEASE/" $RPMSPEC.in >$RPMSPEC


#######################################################################
# Configuration results
#######################################################################
echo "=> project setup with :"
echo "    - target arch: $tgt_arch"
echo "    - target compiler: $tgtcc"
echo "    - target wordsize: ${tgt_word}-bit"
echo "    - host arch: $hst_arch"
echo "    - host wordsize: ${hst_word}-bit"
echo "    - host system: $host"
echo "    - config profile: $profile"
if [ "$verbose" = 1 ]; then
	echo "    - verbose: yes"
else
	echo "    - verbose: no"
fi

echo "=> $builddir/Makefile ready, try:"
echo "   $ cd $builddir"
echo "   $ make"
